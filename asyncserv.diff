diff --git a/lib/pure/nativesockets.nim b/lib/pure/nativesockets.nim
index fe890e721..d9effa1c5 100644
--- a/lib/pure/nativesockets.nim
+++ b/lib/pure/nativesockets.nim
@@ -297,7 +297,7 @@ proc getAddrInfo*(address: string, port: Port, domain: Domain = AF_INET,
   let socketPort = if sockType == SOCK_RAW: "" else: $port
   var gaiResult = getaddrinfo(address, socketPort, addr(hints), result)
   if gaiResult != 0'i32:
-    when useWinVersion or defined(freertos):
+    when useWinVersion or defined(freertos) or defined(cosmLibc):
       raiseOSError(osLastError())
     else:
       raiseOSError(osLastError(), $gai_strerror(gaiResult))
@@ -452,12 +452,12 @@ proc getHostname*(): string {.tags: [ReadIOEffect].} =
 
 proc getSockDomain*(socket: SocketHandle): Domain =
   ## Returns the socket's domain (AF_INET or AF_INET6).
-  var name: Sockaddr_in6
+  var name: Sockaddr_in
   var namelen = sizeof(name).SockLen
   if getsockname(socket, cast[ptr SockAddr](addr(name)),
                  addr(namelen)) == -1'i32:
     raiseOSError(osLastError())
-  let knownDomain = toKnownDomain(name.sin6_family.cint)
+  let knownDomain = toKnownDomain(name.sin_family.cint)
   if knownDomain.isSome:
     result = knownDomain.get()
   else:
@@ -468,21 +468,22 @@ proc getAddrString*(sockAddr: ptr SockAddr): string =
   if sockAddr.sa_family.cint == nativeAfInet:
     result = $inet_ntoa(cast[ptr Sockaddr_in](sockAddr).sin_addr)
   elif sockAddr.sa_family.cint == nativeAfInet6:
-    let addrLen = when not useWinVersion: posix.INET6_ADDRSTRLEN
-                  else: 46 # it's actually 46 in both cases
-    result = newString(addrLen)
-    let addr6 = addr cast[ptr Sockaddr_in6](sockAddr).sin6_addr
-    when not useWinVersion:
-      if posix.inet_ntop(posix.AF_INET6, addr6, addr result[0],
-                         result.len.int32) == nil:
-        raiseOSError(osLastError())
-      if posix.IN6_IS_ADDR_V4MAPPED(addr6) != 0:
-        result = result.substr("::ffff:".len)
-    else:
-      if winlean.inet_ntop(winlean.AF_INET6, addr6, addr result[0],
-                           result.len.int32) == nil:
-        raiseOSError(osLastError())
-    setLen(result, len(cstring(result)))
+    when not defined(cosmLibc):
+      let addrLen = when not useWinVersion: posix.INET6_ADDRSTRLEN
+                    else: 46 # it's actually 46 in both cases
+      result = newString(addrLen)
+      let addr6 = addr cast[ptr Sockaddr_in6](sockAddr).sin6_addr
+      when not useWinVersion:
+        if posix.inet_ntop(posix.AF_INET6, addr6, addr result[0],
+                          result.len.int32) == nil:
+          raiseOSError(osLastError())
+        if posix.IN6_IS_ADDR_V4MAPPED(addr6) != 0:
+          result = result.substr("::ffff:".len)
+      else:
+        if winlean.inet_ntop(winlean.AF_INET6, addr6, addr result[0],
+                            result.len.int32) == nil:
+          raiseOSError(osLastError())
+      setLen(result, len(cstring(result)))
   else:
     when defined(posix) and not defined(nimdoc):
       if sockAddr.sa_family.cint == nativeAfUnix:
diff --git a/lib/pure/selectors.nim b/lib/pure/selectors.nim
index e78219aec..b6bf7fd91 100644
--- a/lib/pure/selectors.nim
+++ b/lib/pure/selectors.nim
@@ -34,13 +34,13 @@ const hasThreadSupport = compileOption("threads") and defined(threadsafe)
 const ioselSupportedPlatform* = defined(macosx) or defined(freebsd) or
                                 defined(netbsd) or defined(openbsd) or
                                 defined(dragonfly) or
-                                (defined(linux) and not defined(android) and not defined(emscripten))
+                                (defined(linux) and not defined(android) and not defined(emscripten) and not defined(cosmLibc))
   ## This constant is used to determine whether the destination platform is
   ## fully supported by `ioselectors` module.
 
 const bsdPlatform = defined(macosx) or defined(freebsd) or
                     defined(netbsd) or defined(openbsd) or
-                    defined(dragonfly)
+                    defined(dragonfly) or defined(cosmLibc)
 
 when defined(nimdoc):
   type
@@ -323,7 +323,9 @@ else:
     # Anything higher is the time to wait in milliseconds.
     doAssert(timeout >= -1, "Cannot select with a negative value, got " & $timeout)
 
-  when defined(linux) and not defined(emscripten):
+  when defined(cosmLibc):
+    include ioselects/ioselectors_poll
+  elif defined(linux) and not defined(emscripten):
     include ioselects/ioselectors_epoll
   elif bsdPlatform:
     include ioselects/ioselectors_kqueue
diff --git a/lib/system/io.nim b/lib/system/io.nim
index 31768eb38..c57c48a10 100644
--- a/lib/system/io.nim
+++ b/lib/system/io.nim
@@ -268,7 +268,7 @@ else:
     IONBF {.importc: "_IONBF", nodecl.}: cint
 
 const SupportIoctlInheritCtl = (defined(linux) or defined(bsd)) and
-                              not defined(nimscript)
+                              not defined(nimscript) and not defined(cosmLibc)
 when SupportIoctlInheritCtl:
   var
     FIOCLEX {.importc, header: "<sys/ioctl.h>".}: cint
